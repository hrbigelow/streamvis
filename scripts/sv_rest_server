#!/usr/bin/env python3

import tornado.ioloop
import tornado.web

import json
import sys
from dataclasses import dataclass, field

"""
/{run}/cfg/{cds} GET, POST, DELETE
/{run}/data/{cds}  GET, POST, DELETE
/{run}/layout/{cds} GET, POST, DELETE

/{run}/data  GET
/{run}/cfg   GET, DELETE
/{run}/layout GET, DELETE

/{run}       DELETE

"""

@dataclass
class RunState:
    # cds => data to put into the ColumnDataSource object
    data: dict = field(default_factory=dict)

    # cds => plot configuration data
    cfg: dict = field(default_factory=dict)

    # cds => (row_start, col_start, row_end, col_end)
    layout: dict = field(default_factory=dict)

class CdsHandler(tornado.web.RequestHandler):

    def initialize(self, state):
        self.state = state 

    def get(self, run_name, mode, cds):

        run = self.state.get(run_name, None)
        if run is None:
            self.set_status(400)
            return

        if mode == 'data':
            data = run.data.get(cds, None)
        elif mode == 'cfg':
            data = run.cfg.get(cds, None)
        else: # mode == layout
            data = run.layout.get(cds, None)

        if data is None:
            self.set_status(401)
            return

        self.write(json.dumps(data))
        self.set_status(200)

    def post(self, run_name, mode, cds):
        
        run = self.state.setdefault(run_name, RunState())
        data = json.loads(self.request.body) 

        if mode == 'data':
            ary = run.data.setdefault(cds, [])
            ary.append(data)
            self.set_status(200)
        elif mode == 'cfg':
            run.cfg[cds] = data
            self.set_status(200)
        elif mode == 'layout':
            run.layout[cds] = data
        else:
            raise RuntimeError('impossible error')

    def delete(self, run_name, mode, cds):

        run = self.state.get(run_name, None)
        if run is None:
            self.set_status(400)
            return

        if mode == 'data':
            if cds in run.data:
                run.data[cds].clear()
        elif mode == 'cds':
            if cds in run.cfg:
                del run.cfg[cds]
        elif mode == 'layout':
            if cds in run.layout:
                del run.layout[cds]

        self.set_status(200)

class RunHandler(tornado.web.RequestHandler):

    def initialize(self, state):
        self.state = state 
        
    def get(self, run_name, mode):
        run = self.state.get(run_name, None)
        if run is None:
            self.write(json.dumps(None))
        elif mode == 'data':
            self.write(json.dumps(run.data))
        elif mode == 'cfg':
            self.write(json.dumps(run.cfg))
        elif mode == 'layout':
            self.write(json.dumps(run.layout))
        self.set_status(200)

    def delete(self, run_name, mode):
        run = self.state.get(run_name, None)
        if run is None:
            return
        if mode == 'data':
            run.data.clear()
        elif mode == 'cfg':
            run.cfg.clear()
        elif mode == 'layout':
            run.layout.clear()

class TopHandler(tornado.web.RequestHandler):

    def initialize(self, state):
        self.state = state 

    def delete(self, run_name):
        if run_name in self.state:
            del self.state[run_name]
        self.set_status(200)

def make_app():
    state = {} # run -> RunState
    return tornado.web.Application([
        (r"/(\w+)/(data|cfg|layout)/(\w+)", CdsHandler, dict(state=state)),
        (r"/(\w+)/(data|cfg|layout)", RunHandler, dict(state=state)),
        (r"/(\w+)", TopHandler, dict(state=state)),
    ])

def main():
    port = int(sys.argv[1])
    app = make_app()
    app.listen(port)
    print(f'Server is running on http://localhost:{port}')
    tornado.ioloop.IOLoop.current().start()

if __name__ == "__main__":
    main()
