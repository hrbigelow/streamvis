// compile from streamvis dir (repo directory)
// python -m grpc_tools.protoc -I . --python_out=. --grpc_python_out=. streamvis/data.proto

// @generated by protoc-gen-es v1.10.1 with parameter "target=js"
// @generated from file streamvis/v1/data.proto (package streamvis.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3, Struct, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from enum streamvis.v1.FieldType
 */
export const FieldType = /*@__PURE__*/ proto3.makeEnum(
  "streamvis.v1.FieldType",
  [
    {no: 0, name: "FIELD_TYPE_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "FIELD_TYPE_FLOAT", localName: "FLOAT"},
    {no: 2, name: "FIELD_TYPE_INT", localName: "INT"},
  ],
);

/**
 * @generated from enum streamvis.v1.Action
 */
export const Action = /*@__PURE__*/ proto3.makeEnum(
  "streamvis.v1.Action",
  [
    {no: 0, name: "ACTION_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "ACTION_DELETE_SCOPE", localName: "DELETE_SCOPE"},
    {no: 2, name: "ACTION_DELETE_NAME", localName: "DELETE_NAME"},
  ],
);

/**
 * @generated from message streamvis.v1.Field
 */
export const Field = /*@__PURE__*/ proto3.makeMessageType(
  "streamvis.v1.Field",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(FieldType) },
  ],
);

/**
 * Adapted from
 * tensorflow/core/example/example.proto
 * tensorflow/core/example/example/feature.proto
 *
 * @generated from message streamvis.v1.FloatList
 */
export const FloatList = /*@__PURE__*/ proto3.makeMessageType(
  "streamvis.v1.FloatList",
  () => [
    { no: 1, name: "value", kind: "scalar", T: 2 /* ScalarType.FLOAT */, repeated: true },
  ],
);

/**
 * @generated from message streamvis.v1.IntList
 */
export const IntList = /*@__PURE__*/ proto3.makeMessageType(
  "streamvis.v1.IntList",
  () => [
    { no: 1, name: "value", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
  ],
);

/**
 * Containers for non-sequential data.
 *
 * @generated from message streamvis.v1.Values
 */
export const Values = /*@__PURE__*/ proto3.makeMessageType(
  "streamvis.v1.Values",
  () => [
    { no: 2, name: "floats", kind: "message", T: FloatList, oneof: "data" },
    { no: 3, name: "ints", kind: "message", T: IntList, oneof: "data" },
  ],
);

/**
 * Scope, Name, Control, DataEntry, ConfigEntry stored in .idx file
 * This message will be logged once per program run
 *
 * @generated from message streamvis.v1.Scope
 */
export const Scope = /*@__PURE__*/ proto3.makeMessageType(
  "streamvis.v1.Scope",
  () => [
    { no: 1, name: "scope_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "scope", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "time", kind: "message", T: Timestamp },
  ],
);

/**
 * Corresponds to the 'name' field of a logger.write command
 * globally unique key is (scope_id, name)
 *
 * @generated from message streamvis.v1.Name
 */
export const Name = /*@__PURE__*/ proto3.makeMessageType(
  "streamvis.v1.Name",
  () => [
    { no: 1, name: "name_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "scope_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "fields", kind: "message", T: Field, repeated: true },
  ],
);

/**
 * @generated from message streamvis.v1.Control
 */
export const Control = /*@__PURE__*/ proto3.makeMessageType(
  "streamvis.v1.Control",
  () => [
    { no: 1, name: "scope", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "action", kind: "enum", T: proto3.getEnumType(Action) },
  ],
);

/**
 * Describes one Data entry in data file 
 *
 * @generated from message streamvis.v1.DataEntry
 */
export const DataEntry = /*@__PURE__*/ proto3.makeMessageType(
  "streamvis.v1.DataEntry",
  () => [
    { no: 1, name: "entry_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "name_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "beg_offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "end_offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * Describes one Config entry in data file
 *
 * @generated from message streamvis.v1.ConfigEntry
 */
export const ConfigEntry = /*@__PURE__*/ proto3.makeMessageType(
  "streamvis.v1.ConfigEntry",
  () => [
    { no: 1, name: "entry_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "scope_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "beg_offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "end_offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * @generated from message streamvis.v1.Data
 */
export const Data = /*@__PURE__*/ proto3.makeMessageType(
  "streamvis.v1.Data",
  () => [
    { no: 1, name: "entry_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "index", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "axes", kind: "message", T: Values, repeated: true },
    { no: 4, name: "name_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ],
);

/**
 * @generated from message streamvis.v1.Config
 */
export const Config = /*@__PURE__*/ proto3.makeMessageType(
  "streamvis.v1.Config",
  () => [
    { no: 1, name: "entry_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "attributes", kind: "message", T: Struct },
    { no: 3, name: "scope_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ],
);

/**
 * @generated from message streamvis.v1.Stored
 */
export const Stored = /*@__PURE__*/ proto3.makeMessageType(
  "streamvis.v1.Stored",
  () => [
    { no: 1, name: "scope", kind: "message", T: Scope, oneof: "value" },
    { no: 2, name: "name", kind: "message", T: Name, oneof: "value" },
    { no: 3, name: "control", kind: "message", T: Control, oneof: "value" },
    { no: 4, name: "data_entry", kind: "message", T: DataEntry, oneof: "value" },
    { no: 5, name: "config_entry", kind: "message", T: ConfigEntry, oneof: "value" },
    { no: 6, name: "data", kind: "message", T: Data, oneof: "value" },
    { no: 7, name: "config", kind: "message", T: Config, oneof: "value" },
  ],
);

/**
 * @generated from message streamvis.v1.DataRequest
 */
export const DataRequest = /*@__PURE__*/ proto3.makeMessageType(
  "streamvis.v1.DataRequest",
  () => [
    { no: 1, name: "scope_pattern", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name_pattern", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "file_offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * @generated from message streamvis.v1.RecordResult
 */
export const RecordResult = /*@__PURE__*/ proto3.makeMessageType(
  "streamvis.v1.RecordResult",
  () => [
    { no: 1, name: "scopes", kind: "map", K: 13 /* ScalarType.UINT32 */, V: {kind: "message", T: Scope} },
    { no: 2, name: "names", kind: "map", K: 13 /* ScalarType.UINT32 */, V: {kind: "message", T: Name} },
    { no: 3, name: "file_offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * @generated from message streamvis.v1.ScopeRequest
 */
export const ScopeRequest = /*@__PURE__*/ proto3.makeMessageType(
  "streamvis.v1.ScopeRequest",
  [],
);

/**
 * @generated from message streamvis.v1.ScopeResult
 */
export const ScopeResult = /*@__PURE__*/ proto3.makeMessageType(
  "streamvis.v1.ScopeResult",
  () => [
    { no: 1, name: "scope", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message streamvis.v1.NamesRequest
 */
export const NamesRequest = /*@__PURE__*/ proto3.makeMessageType(
  "streamvis.v1.NamesRequest",
  () => [
    { no: 1, name: "scope", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message streamvis.v1.ConfigRequest
 */
export const ConfigRequest = /*@__PURE__*/ proto3.makeMessageType(
  "streamvis.v1.ConfigRequest",
  () => [
    { no: 1, name: "scope", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message streamvis.v1.ConfigResult
 */
export const ConfigResult = /*@__PURE__*/ proto3.makeMessageType(
  "streamvis.v1.ConfigResult",
  () => [
    { no: 1, name: "index", kind: "message", T: RecordResult, oneof: "value" },
    { no: 2, name: "config", kind: "message", T: Config, oneof: "value" },
  ],
);

/**
 * @generated from message streamvis.v1.Tag
 */
export const Tag = /*@__PURE__*/ proto3.makeMessageType(
  "streamvis.v1.Tag",
  () => [
    { no: 1, name: "scope", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message streamvis.v1.Streamed
 */
export const Streamed = /*@__PURE__*/ proto3.makeMessageType(
  "streamvis.v1.Streamed",
  () => [
    { no: 1, name: "index", kind: "message", T: RecordResult, oneof: "value" },
    { no: 2, name: "data", kind: "message", T: Data, oneof: "value" },
    { no: 3, name: "name", kind: "message", T: Name, oneof: "value" },
    { no: 4, name: "config", kind: "message", T: Config, oneof: "value" },
    { no: 5, name: "tag", kind: "message", T: Tag, oneof: "value" },
  ],
);

/**
 * @generated from message streamvis.v1.DataResult
 */
export const DataResult = /*@__PURE__*/ proto3.makeMessageType(
  "streamvis.v1.DataResult",
  () => [
    { no: 1, name: "record", kind: "message", T: RecordResult, oneof: "value" },
    { no: 2, name: "data", kind: "message", T: Data, oneof: "value" },
  ],
);

/**
 * @generated from message streamvis.v1.WriteConfigRequest
 */
export const WriteConfigRequest = /*@__PURE__*/ proto3.makeMessageType(
  "streamvis.v1.WriteConfigRequest",
  () => [
    { no: 1, name: "scope_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "attributes", kind: "message", T: Struct },
  ],
);

/**
 * @generated from message streamvis.v1.WriteScopeRequest
 */
export const WriteScopeRequest = /*@__PURE__*/ proto3.makeMessageType(
  "streamvis.v1.WriteScopeRequest",
  () => [
    { no: 1, name: "scope", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message streamvis.v1.WriteNameRequest
 */
export const WriteNameRequest = /*@__PURE__*/ proto3.makeMessageType(
  "streamvis.v1.WriteNameRequest",
  () => [
    { no: 1, name: "names", kind: "message", T: Name, repeated: true },
  ],
);

/**
 * @generated from message streamvis.v1.DeleteTagRequest
 */
export const DeleteTagRequest = /*@__PURE__*/ proto3.makeMessageType(
  "streamvis.v1.DeleteTagRequest",
  () => [
    { no: 1, name: "scope", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "names", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

/**
 * @generated from message streamvis.v1.DeleteTagResponse
 */
export const DeleteTagResponse = /*@__PURE__*/ proto3.makeMessageType(
  "streamvis.v1.DeleteTagResponse",
  [],
);

/**
 * @generated from message streamvis.v1.WriteDataRequest
 */
export const WriteDataRequest = /*@__PURE__*/ proto3.makeMessageType(
  "streamvis.v1.WriteDataRequest",
  () => [
    { no: 1, name: "datas", kind: "message", T: Data, repeated: true },
  ],
);

/**
 * @generated from message streamvis.v1.WriteDataResponse
 */
export const WriteDataResponse = /*@__PURE__*/ proto3.makeMessageType(
  "streamvis.v1.WriteDataResponse",
  [],
);

/**
 * @generated from message streamvis.v1.WriteScopeResponse
 */
export const WriteScopeResponse = /*@__PURE__*/ proto3.makeMessageType(
  "streamvis.v1.WriteScopeResponse",
  () => [
    { no: 1, name: "scope_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ],
);

/**
 * @generated from message streamvis.v1.WriteNameResponse
 */
export const WriteNameResponse = /*@__PURE__*/ proto3.makeMessageType(
  "streamvis.v1.WriteNameResponse",
  () => [
    { no: 1, name: "names", kind: "message", T: Name, repeated: true },
  ],
);

/**
 * @generated from message streamvis.v1.WriteConfigResponse
 */
export const WriteConfigResponse = /*@__PURE__*/ proto3.makeMessageType(
  "streamvis.v1.WriteConfigResponse",
  [],
);

