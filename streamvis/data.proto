syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";


enum FieldType {
  FLOAT = 0;
  INT = 1;
}

message Field {
  string name = 1;
  FieldType type = 2;
}

/* Adapted from
 * tensorflow/core/example/example.proto
 * tensorflow/core/example/example/feature.proto
*/
message FloatList {
  repeated float value = 1 [packed = true];
}
message IntList {
  repeated int32 value = 1 [packed = true];
}

// Containers for non-sequential data.
message Values {
  // Each feature can be exactly one kind.
  oneof data {
    FloatList floats = 2;
    IntList ints = 3;
  }
}

// Describes one or more Entry objects
// Logged to the index file
// Index file may contain duplicate MetaData messages - duplicates are silently
// ignored
message Metadata {
  uint32 meta_id = 1; // primary key, hash value of (scope, name, index)
  string scope = 2;
  string name = 3;
  repeated Field fields = 4;
}

// Describes one Data entry in data file 
message Entry {
  uint32 entry_id = 1; // primary key
  uint32 meta_id = 2; // foreign key to MetaData message
  uint32 beg_offset = 3; // file offset of begin of Data message
  uint32 end_offset = 4; // file offset of end of Data message
}

// Actual data
message Data {
  // primary key is (entry_id, index)
  uint32 entry_id = 1; // foreign key to Entry message
  uint32 index = 2; // 
  repeated Values axes = 3; // actual data
  uint32 meta_id = 4; // not stored on disk - used in join logic for RPC
}

enum Action {
  DELETE = 0;
}

message Control {
  string scope = 1;
  string name = 2;
  Action action = 3;
}

message ScopeConfig {
  string scope = 1;
  google.protobuf.Struct attributes = 2;
}


message QueryRequest {
  optional string scope = 1;
  optional string name = 2;
}

message ScopeRequest {
  string scope = 1;
}

enum RecordType {
  METADATA = 0;
  DATA = 1;
  STRING = 2;
}

message StreamedRecord {
  RecordType type = 1;
  oneof record {
    Metadata metadata = 2;
    Data data = 3;
    string value = 4;
  }
}


service RecordService {
  rpc QueryRecords (QueryRequest) returns (stream StreamedRecord);
  rpc Scopes (google.protobuf.Empty) returns (stream StreamedRecord);
  rpc Names (ScopeRequest) returns (stream StreamedRecord);
}


