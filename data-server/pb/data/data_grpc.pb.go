// compile from streamvis dir (repo directory)
// python -m grpc_tools.protoc -I . --python_out=. --grpc_python_out=. streamvis/data.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: data.proto

package data

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RecordService_QueryRecords_FullMethodName     = "/RecordService/QueryRecords"
	RecordService_Scopes_FullMethodName           = "/RecordService/Scopes"
	RecordService_Names_FullMethodName            = "/RecordService/Names"
	RecordService_Configs_FullMethodName          = "/RecordService/Configs"
	RecordService_WriteScope_FullMethodName       = "/RecordService/WriteScope"
	RecordService_WriteConfig_FullMethodName      = "/RecordService/WriteConfig"
	RecordService_WriteNames_FullMethodName       = "/RecordService/WriteNames"
	RecordService_DeleteScopeNames_FullMethodName = "/RecordService/DeleteScopeNames"
	RecordService_WriteData_FullMethodName        = "/RecordService/WriteData"
)

// RecordServiceClient is the client API for RecordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecordServiceClient interface {
	QueryRecords(ctx context.Context, in *Index, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamedRecord], error)
	Scopes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamedRecord], error)
	Names(ctx context.Context, in *ScopeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamedRecord], error)
	Configs(ctx context.Context, in *ScopeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamedRecord], error)
	WriteScope(ctx context.Context, in *WriteScopeRequest, opts ...grpc.CallOption) (*IntegerResponse, error)
	WriteConfig(ctx context.Context, in *WriteConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	WriteNames(ctx context.Context, in *WriteNameRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamedRecord], error)
	DeleteScopeNames(ctx context.Context, in *ScopeNameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	WriteData(ctx context.Context, in *WriteDataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type recordServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecordServiceClient(cc grpc.ClientConnInterface) RecordServiceClient {
	return &recordServiceClient{cc}
}

func (c *recordServiceClient) QueryRecords(ctx context.Context, in *Index, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamedRecord], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RecordService_ServiceDesc.Streams[0], RecordService_QueryRecords_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Index, StreamedRecord]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RecordService_QueryRecordsClient = grpc.ServerStreamingClient[StreamedRecord]

func (c *recordServiceClient) Scopes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamedRecord], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RecordService_ServiceDesc.Streams[1], RecordService_Scopes_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, StreamedRecord]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RecordService_ScopesClient = grpc.ServerStreamingClient[StreamedRecord]

func (c *recordServiceClient) Names(ctx context.Context, in *ScopeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamedRecord], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RecordService_ServiceDesc.Streams[2], RecordService_Names_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ScopeRequest, StreamedRecord]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RecordService_NamesClient = grpc.ServerStreamingClient[StreamedRecord]

func (c *recordServiceClient) Configs(ctx context.Context, in *ScopeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamedRecord], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RecordService_ServiceDesc.Streams[3], RecordService_Configs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ScopeRequest, StreamedRecord]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RecordService_ConfigsClient = grpc.ServerStreamingClient[StreamedRecord]

func (c *recordServiceClient) WriteScope(ctx context.Context, in *WriteScopeRequest, opts ...grpc.CallOption) (*IntegerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IntegerResponse)
	err := c.cc.Invoke(ctx, RecordService_WriteScope_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordServiceClient) WriteConfig(ctx context.Context, in *WriteConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RecordService_WriteConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordServiceClient) WriteNames(ctx context.Context, in *WriteNameRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamedRecord], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RecordService_ServiceDesc.Streams[4], RecordService_WriteNames_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[WriteNameRequest, StreamedRecord]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RecordService_WriteNamesClient = grpc.ServerStreamingClient[StreamedRecord]

func (c *recordServiceClient) DeleteScopeNames(ctx context.Context, in *ScopeNameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RecordService_DeleteScopeNames_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordServiceClient) WriteData(ctx context.Context, in *WriteDataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RecordService_WriteData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecordServiceServer is the server API for RecordService service.
// All implementations must embed UnimplementedRecordServiceServer
// for forward compatibility.
type RecordServiceServer interface {
	QueryRecords(*Index, grpc.ServerStreamingServer[StreamedRecord]) error
	Scopes(*emptypb.Empty, grpc.ServerStreamingServer[StreamedRecord]) error
	Names(*ScopeRequest, grpc.ServerStreamingServer[StreamedRecord]) error
	Configs(*ScopeRequest, grpc.ServerStreamingServer[StreamedRecord]) error
	WriteScope(context.Context, *WriteScopeRequest) (*IntegerResponse, error)
	WriteConfig(context.Context, *WriteConfigRequest) (*emptypb.Empty, error)
	WriteNames(*WriteNameRequest, grpc.ServerStreamingServer[StreamedRecord]) error
	DeleteScopeNames(context.Context, *ScopeNameRequest) (*emptypb.Empty, error)
	WriteData(context.Context, *WriteDataRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedRecordServiceServer()
}

// UnimplementedRecordServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRecordServiceServer struct{}

func (UnimplementedRecordServiceServer) QueryRecords(*Index, grpc.ServerStreamingServer[StreamedRecord]) error {
	return status.Errorf(codes.Unimplemented, "method QueryRecords not implemented")
}
func (UnimplementedRecordServiceServer) Scopes(*emptypb.Empty, grpc.ServerStreamingServer[StreamedRecord]) error {
	return status.Errorf(codes.Unimplemented, "method Scopes not implemented")
}
func (UnimplementedRecordServiceServer) Names(*ScopeRequest, grpc.ServerStreamingServer[StreamedRecord]) error {
	return status.Errorf(codes.Unimplemented, "method Names not implemented")
}
func (UnimplementedRecordServiceServer) Configs(*ScopeRequest, grpc.ServerStreamingServer[StreamedRecord]) error {
	return status.Errorf(codes.Unimplemented, "method Configs not implemented")
}
func (UnimplementedRecordServiceServer) WriteScope(context.Context, *WriteScopeRequest) (*IntegerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteScope not implemented")
}
func (UnimplementedRecordServiceServer) WriteConfig(context.Context, *WriteConfigRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteConfig not implemented")
}
func (UnimplementedRecordServiceServer) WriteNames(*WriteNameRequest, grpc.ServerStreamingServer[StreamedRecord]) error {
	return status.Errorf(codes.Unimplemented, "method WriteNames not implemented")
}
func (UnimplementedRecordServiceServer) DeleteScopeNames(context.Context, *ScopeNameRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteScopeNames not implemented")
}
func (UnimplementedRecordServiceServer) WriteData(context.Context, *WriteDataRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteData not implemented")
}
func (UnimplementedRecordServiceServer) mustEmbedUnimplementedRecordServiceServer() {}
func (UnimplementedRecordServiceServer) testEmbeddedByValue()                       {}

// UnsafeRecordServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecordServiceServer will
// result in compilation errors.
type UnsafeRecordServiceServer interface {
	mustEmbedUnimplementedRecordServiceServer()
}

func RegisterRecordServiceServer(s grpc.ServiceRegistrar, srv RecordServiceServer) {
	// If the following call pancis, it indicates UnimplementedRecordServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RecordService_ServiceDesc, srv)
}

func _RecordService_QueryRecords_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Index)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RecordServiceServer).QueryRecords(m, &grpc.GenericServerStream[Index, StreamedRecord]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RecordService_QueryRecordsServer = grpc.ServerStreamingServer[StreamedRecord]

func _RecordService_Scopes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RecordServiceServer).Scopes(m, &grpc.GenericServerStream[emptypb.Empty, StreamedRecord]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RecordService_ScopesServer = grpc.ServerStreamingServer[StreamedRecord]

func _RecordService_Names_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ScopeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RecordServiceServer).Names(m, &grpc.GenericServerStream[ScopeRequest, StreamedRecord]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RecordService_NamesServer = grpc.ServerStreamingServer[StreamedRecord]

func _RecordService_Configs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ScopeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RecordServiceServer).Configs(m, &grpc.GenericServerStream[ScopeRequest, StreamedRecord]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RecordService_ConfigsServer = grpc.ServerStreamingServer[StreamedRecord]

func _RecordService_WriteScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).WriteScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecordService_WriteScope_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).WriteScope(ctx, req.(*WriteScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordService_WriteConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).WriteConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecordService_WriteConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).WriteConfig(ctx, req.(*WriteConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordService_WriteNames_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WriteNameRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RecordServiceServer).WriteNames(m, &grpc.GenericServerStream[WriteNameRequest, StreamedRecord]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RecordService_WriteNamesServer = grpc.ServerStreamingServer[StreamedRecord]

func _RecordService_DeleteScopeNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScopeNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).DeleteScopeNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecordService_DeleteScopeNames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).DeleteScopeNames(ctx, req.(*ScopeNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordService_WriteData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).WriteData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecordService_WriteData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).WriteData(ctx, req.(*WriteDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RecordService_ServiceDesc is the grpc.ServiceDesc for RecordService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecordService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RecordService",
	HandlerType: (*RecordServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WriteScope",
			Handler:    _RecordService_WriteScope_Handler,
		},
		{
			MethodName: "WriteConfig",
			Handler:    _RecordService_WriteConfig_Handler,
		},
		{
			MethodName: "DeleteScopeNames",
			Handler:    _RecordService_DeleteScopeNames_Handler,
		},
		{
			MethodName: "WriteData",
			Handler:    _RecordService_WriteData_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "QueryRecords",
			Handler:       _RecordService_QueryRecords_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Scopes",
			Handler:       _RecordService_Scopes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Names",
			Handler:       _RecordService_Names_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Configs",
			Handler:       _RecordService_Configs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WriteNames",
			Handler:       _RecordService_WriteNames_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "data.proto",
}
