// compile from streamvis dir (repo directory)
// python -m grpc_tools.protoc -I . --python_out=. --grpc_python_out=. streamvis/data.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: streamvis/v1/data.proto

package streamvis_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Service_QueryData_FullMethodName        = "/streamvis.v1.Service/QueryData"
	Service_Scopes_FullMethodName           = "/streamvis.v1.Service/Scopes"
	Service_Names_FullMethodName            = "/streamvis.v1.Service/Names"
	Service_Configs_FullMethodName          = "/streamvis.v1.Service/Configs"
	Service_WriteScope_FullMethodName       = "/streamvis.v1.Service/WriteScope"
	Service_WriteConfig_FullMethodName      = "/streamvis.v1.Service/WriteConfig"
	Service_WriteNames_FullMethodName       = "/streamvis.v1.Service/WriteNames"
	Service_DeleteScopeNames_FullMethodName = "/streamvis.v1.Service/DeleteScopeNames"
	Service_WriteData_FullMethodName        = "/streamvis.v1.Service/WriteData"
)

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	QueryData(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DataResult], error)
	Scopes(ctx context.Context, in *ScopeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ScopeResult], error)
	Names(ctx context.Context, in *NamesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Tag], error)
	Configs(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ConfigResult], error)
	WriteScope(ctx context.Context, in *WriteScopeRequest, opts ...grpc.CallOption) (*WriteScopeResponse, error)
	WriteConfig(ctx context.Context, in *WriteConfigRequest, opts ...grpc.CallOption) (*WriteConfigResponse, error)
	WriteNames(ctx context.Context, in *WriteNameRequest, opts ...grpc.CallOption) (*WriteNameResponse, error)
	DeleteScopeNames(ctx context.Context, in *DeleteTagRequest, opts ...grpc.CallOption) (*DeleteTagResponse, error)
	WriteData(ctx context.Context, in *WriteDataRequest, opts ...grpc.CallOption) (*WriteDataResponse, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) QueryData(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DataResult], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Service_ServiceDesc.Streams[0], Service_QueryData_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DataRequest, DataResult]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Service_QueryDataClient = grpc.ServerStreamingClient[DataResult]

func (c *serviceClient) Scopes(ctx context.Context, in *ScopeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ScopeResult], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Service_ServiceDesc.Streams[1], Service_Scopes_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ScopeRequest, ScopeResult]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Service_ScopesClient = grpc.ServerStreamingClient[ScopeResult]

func (c *serviceClient) Names(ctx context.Context, in *NamesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Tag], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Service_ServiceDesc.Streams[2], Service_Names_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NamesRequest, Tag]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Service_NamesClient = grpc.ServerStreamingClient[Tag]

func (c *serviceClient) Configs(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ConfigResult], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Service_ServiceDesc.Streams[3], Service_Configs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ConfigRequest, ConfigResult]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Service_ConfigsClient = grpc.ServerStreamingClient[ConfigResult]

func (c *serviceClient) WriteScope(ctx context.Context, in *WriteScopeRequest, opts ...grpc.CallOption) (*WriteScopeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WriteScopeResponse)
	err := c.cc.Invoke(ctx, Service_WriteScope_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) WriteConfig(ctx context.Context, in *WriteConfigRequest, opts ...grpc.CallOption) (*WriteConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WriteConfigResponse)
	err := c.cc.Invoke(ctx, Service_WriteConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) WriteNames(ctx context.Context, in *WriteNameRequest, opts ...grpc.CallOption) (*WriteNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WriteNameResponse)
	err := c.cc.Invoke(ctx, Service_WriteNames_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteScopeNames(ctx context.Context, in *DeleteTagRequest, opts ...grpc.CallOption) (*DeleteTagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTagResponse)
	err := c.cc.Invoke(ctx, Service_DeleteScopeNames_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) WriteData(ctx context.Context, in *WriteDataRequest, opts ...grpc.CallOption) (*WriteDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WriteDataResponse)
	err := c.cc.Invoke(ctx, Service_WriteData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility.
type ServiceServer interface {
	QueryData(*DataRequest, grpc.ServerStreamingServer[DataResult]) error
	Scopes(*ScopeRequest, grpc.ServerStreamingServer[ScopeResult]) error
	Names(*NamesRequest, grpc.ServerStreamingServer[Tag]) error
	Configs(*ConfigRequest, grpc.ServerStreamingServer[ConfigResult]) error
	WriteScope(context.Context, *WriteScopeRequest) (*WriteScopeResponse, error)
	WriteConfig(context.Context, *WriteConfigRequest) (*WriteConfigResponse, error)
	WriteNames(context.Context, *WriteNameRequest) (*WriteNameResponse, error)
	DeleteScopeNames(context.Context, *DeleteTagRequest) (*DeleteTagResponse, error)
	WriteData(context.Context, *WriteDataRequest) (*WriteDataResponse, error)
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServiceServer struct{}

func (UnimplementedServiceServer) QueryData(*DataRequest, grpc.ServerStreamingServer[DataResult]) error {
	return status.Errorf(codes.Unimplemented, "method QueryData not implemented")
}
func (UnimplementedServiceServer) Scopes(*ScopeRequest, grpc.ServerStreamingServer[ScopeResult]) error {
	return status.Errorf(codes.Unimplemented, "method Scopes not implemented")
}
func (UnimplementedServiceServer) Names(*NamesRequest, grpc.ServerStreamingServer[Tag]) error {
	return status.Errorf(codes.Unimplemented, "method Names not implemented")
}
func (UnimplementedServiceServer) Configs(*ConfigRequest, grpc.ServerStreamingServer[ConfigResult]) error {
	return status.Errorf(codes.Unimplemented, "method Configs not implemented")
}
func (UnimplementedServiceServer) WriteScope(context.Context, *WriteScopeRequest) (*WriteScopeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteScope not implemented")
}
func (UnimplementedServiceServer) WriteConfig(context.Context, *WriteConfigRequest) (*WriteConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteConfig not implemented")
}
func (UnimplementedServiceServer) WriteNames(context.Context, *WriteNameRequest) (*WriteNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteNames not implemented")
}
func (UnimplementedServiceServer) DeleteScopeNames(context.Context, *DeleteTagRequest) (*DeleteTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteScopeNames not implemented")
}
func (UnimplementedServiceServer) WriteData(context.Context, *WriteDataRequest) (*WriteDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteData not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}
func (UnimplementedServiceServer) testEmbeddedByValue()                 {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	// If the following call pancis, it indicates UnimplementedServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_QueryData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServer).QueryData(m, &grpc.GenericServerStream[DataRequest, DataResult]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Service_QueryDataServer = grpc.ServerStreamingServer[DataResult]

func _Service_Scopes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ScopeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServer).Scopes(m, &grpc.GenericServerStream[ScopeRequest, ScopeResult]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Service_ScopesServer = grpc.ServerStreamingServer[ScopeResult]

func _Service_Names_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NamesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServer).Names(m, &grpc.GenericServerStream[NamesRequest, Tag]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Service_NamesServer = grpc.ServerStreamingServer[Tag]

func _Service_Configs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConfigRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServer).Configs(m, &grpc.GenericServerStream[ConfigRequest, ConfigResult]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Service_ConfigsServer = grpc.ServerStreamingServer[ConfigResult]

func _Service_WriteScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).WriteScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_WriteScope_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).WriteScope(ctx, req.(*WriteScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_WriteConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).WriteConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_WriteConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).WriteConfig(ctx, req.(*WriteConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_WriteNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).WriteNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_WriteNames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).WriteNames(ctx, req.(*WriteNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteScopeNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteScopeNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_DeleteScopeNames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteScopeNames(ctx, req.(*DeleteTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_WriteData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).WriteData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_WriteData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).WriteData(ctx, req.(*WriteDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "streamvis.v1.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WriteScope",
			Handler:    _Service_WriteScope_Handler,
		},
		{
			MethodName: "WriteConfig",
			Handler:    _Service_WriteConfig_Handler,
		},
		{
			MethodName: "WriteNames",
			Handler:    _Service_WriteNames_Handler,
		},
		{
			MethodName: "DeleteScopeNames",
			Handler:    _Service_DeleteScopeNames_Handler,
		},
		{
			MethodName: "WriteData",
			Handler:    _Service_WriteData_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "QueryData",
			Handler:       _Service_QueryData_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Scopes",
			Handler:       _Service_Scopes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Names",
			Handler:       _Service_Names_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Configs",
			Handler:       _Service_Configs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "streamvis/v1/data.proto",
}
