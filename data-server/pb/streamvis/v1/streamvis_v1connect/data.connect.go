// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: streamvis/v1/data.proto

package streamvis_v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	v1 "data-server/pb/streamvis/v1"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ServiceName is the fully-qualified name of the Service service.
	ServiceName = "streamvis.v1.Service"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ServiceQueryDataProcedure is the fully-qualified name of the Service's QueryData RPC.
	ServiceQueryDataProcedure = "/streamvis.v1.Service/QueryData"
	// ServiceScopesProcedure is the fully-qualified name of the Service's Scopes RPC.
	ServiceScopesProcedure = "/streamvis.v1.Service/Scopes"
	// ServiceNamesProcedure is the fully-qualified name of the Service's Names RPC.
	ServiceNamesProcedure = "/streamvis.v1.Service/Names"
	// ServiceConfigsProcedure is the fully-qualified name of the Service's Configs RPC.
	ServiceConfigsProcedure = "/streamvis.v1.Service/Configs"
	// ServiceWriteScopeProcedure is the fully-qualified name of the Service's WriteScope RPC.
	ServiceWriteScopeProcedure = "/streamvis.v1.Service/WriteScope"
	// ServiceWriteConfigProcedure is the fully-qualified name of the Service's WriteConfig RPC.
	ServiceWriteConfigProcedure = "/streamvis.v1.Service/WriteConfig"
	// ServiceWriteNamesProcedure is the fully-qualified name of the Service's WriteNames RPC.
	ServiceWriteNamesProcedure = "/streamvis.v1.Service/WriteNames"
	// ServiceDeleteScopeNamesProcedure is the fully-qualified name of the Service's DeleteScopeNames
	// RPC.
	ServiceDeleteScopeNamesProcedure = "/streamvis.v1.Service/DeleteScopeNames"
	// ServiceWriteDataProcedure is the fully-qualified name of the Service's WriteData RPC.
	ServiceWriteDataProcedure = "/streamvis.v1.Service/WriteData"
)

// ServiceClient is a client for the streamvis.v1.Service service.
type ServiceClient interface {
	QueryData(context.Context, *v1.DataRequest) (*connect.ServerStreamForClient[v1.DataResult], error)
	Scopes(context.Context, *v1.ScopeRequest) (*connect.ServerStreamForClient[v1.ScopeResult], error)
	Names(context.Context, *v1.NamesRequest) (*connect.ServerStreamForClient[v1.Tag], error)
	Configs(context.Context, *v1.ConfigRequest) (*connect.ServerStreamForClient[v1.ConfigResult], error)
	WriteScope(context.Context, *v1.WriteScopeRequest) (*v1.WriteScopeResponse, error)
	WriteConfig(context.Context, *v1.WriteConfigRequest) (*v1.WriteConfigResponse, error)
	WriteNames(context.Context, *v1.WriteNameRequest) (*v1.WriteNameResponse, error)
	DeleteScopeNames(context.Context, *v1.DeleteTagRequest) (*v1.DeleteTagResponse, error)
	WriteData(context.Context, *v1.WriteDataRequest) (*v1.WriteDataResponse, error)
}

// NewServiceClient constructs a client for the streamvis.v1.Service service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	serviceMethods := v1.File_streamvis_v1_data_proto.Services().ByName("Service").Methods()
	return &serviceClient{
		queryData: connect.NewClient[v1.DataRequest, v1.DataResult](
			httpClient,
			baseURL+ServiceQueryDataProcedure,
			connect.WithSchema(serviceMethods.ByName("QueryData")),
			connect.WithClientOptions(opts...),
		),
		scopes: connect.NewClient[v1.ScopeRequest, v1.ScopeResult](
			httpClient,
			baseURL+ServiceScopesProcedure,
			connect.WithSchema(serviceMethods.ByName("Scopes")),
			connect.WithClientOptions(opts...),
		),
		names: connect.NewClient[v1.NamesRequest, v1.Tag](
			httpClient,
			baseURL+ServiceNamesProcedure,
			connect.WithSchema(serviceMethods.ByName("Names")),
			connect.WithClientOptions(opts...),
		),
		configs: connect.NewClient[v1.ConfigRequest, v1.ConfigResult](
			httpClient,
			baseURL+ServiceConfigsProcedure,
			connect.WithSchema(serviceMethods.ByName("Configs")),
			connect.WithClientOptions(opts...),
		),
		writeScope: connect.NewClient[v1.WriteScopeRequest, v1.WriteScopeResponse](
			httpClient,
			baseURL+ServiceWriteScopeProcedure,
			connect.WithSchema(serviceMethods.ByName("WriteScope")),
			connect.WithClientOptions(opts...),
		),
		writeConfig: connect.NewClient[v1.WriteConfigRequest, v1.WriteConfigResponse](
			httpClient,
			baseURL+ServiceWriteConfigProcedure,
			connect.WithSchema(serviceMethods.ByName("WriteConfig")),
			connect.WithClientOptions(opts...),
		),
		writeNames: connect.NewClient[v1.WriteNameRequest, v1.WriteNameResponse](
			httpClient,
			baseURL+ServiceWriteNamesProcedure,
			connect.WithSchema(serviceMethods.ByName("WriteNames")),
			connect.WithClientOptions(opts...),
		),
		deleteScopeNames: connect.NewClient[v1.DeleteTagRequest, v1.DeleteTagResponse](
			httpClient,
			baseURL+ServiceDeleteScopeNamesProcedure,
			connect.WithSchema(serviceMethods.ByName("DeleteScopeNames")),
			connect.WithClientOptions(opts...),
		),
		writeData: connect.NewClient[v1.WriteDataRequest, v1.WriteDataResponse](
			httpClient,
			baseURL+ServiceWriteDataProcedure,
			connect.WithSchema(serviceMethods.ByName("WriteData")),
			connect.WithClientOptions(opts...),
		),
	}
}

// serviceClient implements ServiceClient.
type serviceClient struct {
	queryData        *connect.Client[v1.DataRequest, v1.DataResult]
	scopes           *connect.Client[v1.ScopeRequest, v1.ScopeResult]
	names            *connect.Client[v1.NamesRequest, v1.Tag]
	configs          *connect.Client[v1.ConfigRequest, v1.ConfigResult]
	writeScope       *connect.Client[v1.WriteScopeRequest, v1.WriteScopeResponse]
	writeConfig      *connect.Client[v1.WriteConfigRequest, v1.WriteConfigResponse]
	writeNames       *connect.Client[v1.WriteNameRequest, v1.WriteNameResponse]
	deleteScopeNames *connect.Client[v1.DeleteTagRequest, v1.DeleteTagResponse]
	writeData        *connect.Client[v1.WriteDataRequest, v1.WriteDataResponse]
}

// QueryData calls streamvis.v1.Service.QueryData.
func (c *serviceClient) QueryData(ctx context.Context, req *v1.DataRequest) (*connect.ServerStreamForClient[v1.DataResult], error) {
	return c.queryData.CallServerStream(ctx, connect.NewRequest(req))
}

// Scopes calls streamvis.v1.Service.Scopes.
func (c *serviceClient) Scopes(ctx context.Context, req *v1.ScopeRequest) (*connect.ServerStreamForClient[v1.ScopeResult], error) {
	return c.scopes.CallServerStream(ctx, connect.NewRequest(req))
}

// Names calls streamvis.v1.Service.Names.
func (c *serviceClient) Names(ctx context.Context, req *v1.NamesRequest) (*connect.ServerStreamForClient[v1.Tag], error) {
	return c.names.CallServerStream(ctx, connect.NewRequest(req))
}

// Configs calls streamvis.v1.Service.Configs.
func (c *serviceClient) Configs(ctx context.Context, req *v1.ConfigRequest) (*connect.ServerStreamForClient[v1.ConfigResult], error) {
	return c.configs.CallServerStream(ctx, connect.NewRequest(req))
}

// WriteScope calls streamvis.v1.Service.WriteScope.
func (c *serviceClient) WriteScope(ctx context.Context, req *v1.WriteScopeRequest) (*v1.WriteScopeResponse, error) {
	response, err := c.writeScope.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// WriteConfig calls streamvis.v1.Service.WriteConfig.
func (c *serviceClient) WriteConfig(ctx context.Context, req *v1.WriteConfigRequest) (*v1.WriteConfigResponse, error) {
	response, err := c.writeConfig.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// WriteNames calls streamvis.v1.Service.WriteNames.
func (c *serviceClient) WriteNames(ctx context.Context, req *v1.WriteNameRequest) (*v1.WriteNameResponse, error) {
	response, err := c.writeNames.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// DeleteScopeNames calls streamvis.v1.Service.DeleteScopeNames.
func (c *serviceClient) DeleteScopeNames(ctx context.Context, req *v1.DeleteTagRequest) (*v1.DeleteTagResponse, error) {
	response, err := c.deleteScopeNames.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// WriteData calls streamvis.v1.Service.WriteData.
func (c *serviceClient) WriteData(ctx context.Context, req *v1.WriteDataRequest) (*v1.WriteDataResponse, error) {
	response, err := c.writeData.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// ServiceHandler is an implementation of the streamvis.v1.Service service.
type ServiceHandler interface {
	QueryData(context.Context, *v1.DataRequest, *connect.ServerStream[v1.DataResult]) error
	Scopes(context.Context, *v1.ScopeRequest, *connect.ServerStream[v1.ScopeResult]) error
	Names(context.Context, *v1.NamesRequest, *connect.ServerStream[v1.Tag]) error
	Configs(context.Context, *v1.ConfigRequest, *connect.ServerStream[v1.ConfigResult]) error
	WriteScope(context.Context, *v1.WriteScopeRequest) (*v1.WriteScopeResponse, error)
	WriteConfig(context.Context, *v1.WriteConfigRequest) (*v1.WriteConfigResponse, error)
	WriteNames(context.Context, *v1.WriteNameRequest) (*v1.WriteNameResponse, error)
	DeleteScopeNames(context.Context, *v1.DeleteTagRequest) (*v1.DeleteTagResponse, error)
	WriteData(context.Context, *v1.WriteDataRequest) (*v1.WriteDataResponse, error)
}

// NewServiceHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewServiceHandler(svc ServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	serviceMethods := v1.File_streamvis_v1_data_proto.Services().ByName("Service").Methods()
	serviceQueryDataHandler := connect.NewServerStreamHandlerSimple(
		ServiceQueryDataProcedure,
		svc.QueryData,
		connect.WithSchema(serviceMethods.ByName("QueryData")),
		connect.WithHandlerOptions(opts...),
	)
	serviceScopesHandler := connect.NewServerStreamHandlerSimple(
		ServiceScopesProcedure,
		svc.Scopes,
		connect.WithSchema(serviceMethods.ByName("Scopes")),
		connect.WithHandlerOptions(opts...),
	)
	serviceNamesHandler := connect.NewServerStreamHandlerSimple(
		ServiceNamesProcedure,
		svc.Names,
		connect.WithSchema(serviceMethods.ByName("Names")),
		connect.WithHandlerOptions(opts...),
	)
	serviceConfigsHandler := connect.NewServerStreamHandlerSimple(
		ServiceConfigsProcedure,
		svc.Configs,
		connect.WithSchema(serviceMethods.ByName("Configs")),
		connect.WithHandlerOptions(opts...),
	)
	serviceWriteScopeHandler := connect.NewUnaryHandlerSimple(
		ServiceWriteScopeProcedure,
		svc.WriteScope,
		connect.WithSchema(serviceMethods.ByName("WriteScope")),
		connect.WithHandlerOptions(opts...),
	)
	serviceWriteConfigHandler := connect.NewUnaryHandlerSimple(
		ServiceWriteConfigProcedure,
		svc.WriteConfig,
		connect.WithSchema(serviceMethods.ByName("WriteConfig")),
		connect.WithHandlerOptions(opts...),
	)
	serviceWriteNamesHandler := connect.NewUnaryHandlerSimple(
		ServiceWriteNamesProcedure,
		svc.WriteNames,
		connect.WithSchema(serviceMethods.ByName("WriteNames")),
		connect.WithHandlerOptions(opts...),
	)
	serviceDeleteScopeNamesHandler := connect.NewUnaryHandlerSimple(
		ServiceDeleteScopeNamesProcedure,
		svc.DeleteScopeNames,
		connect.WithSchema(serviceMethods.ByName("DeleteScopeNames")),
		connect.WithHandlerOptions(opts...),
	)
	serviceWriteDataHandler := connect.NewUnaryHandlerSimple(
		ServiceWriteDataProcedure,
		svc.WriteData,
		connect.WithSchema(serviceMethods.ByName("WriteData")),
		connect.WithHandlerOptions(opts...),
	)
	return "/streamvis.v1.Service/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ServiceQueryDataProcedure:
			serviceQueryDataHandler.ServeHTTP(w, r)
		case ServiceScopesProcedure:
			serviceScopesHandler.ServeHTTP(w, r)
		case ServiceNamesProcedure:
			serviceNamesHandler.ServeHTTP(w, r)
		case ServiceConfigsProcedure:
			serviceConfigsHandler.ServeHTTP(w, r)
		case ServiceWriteScopeProcedure:
			serviceWriteScopeHandler.ServeHTTP(w, r)
		case ServiceWriteConfigProcedure:
			serviceWriteConfigHandler.ServeHTTP(w, r)
		case ServiceWriteNamesProcedure:
			serviceWriteNamesHandler.ServeHTTP(w, r)
		case ServiceDeleteScopeNamesProcedure:
			serviceDeleteScopeNamesHandler.ServeHTTP(w, r)
		case ServiceWriteDataProcedure:
			serviceWriteDataHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedServiceHandler struct{}

func (UnimplementedServiceHandler) QueryData(context.Context, *v1.DataRequest, *connect.ServerStream[v1.DataResult]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("streamvis.v1.Service.QueryData is not implemented"))
}

func (UnimplementedServiceHandler) Scopes(context.Context, *v1.ScopeRequest, *connect.ServerStream[v1.ScopeResult]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("streamvis.v1.Service.Scopes is not implemented"))
}

func (UnimplementedServiceHandler) Names(context.Context, *v1.NamesRequest, *connect.ServerStream[v1.Tag]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("streamvis.v1.Service.Names is not implemented"))
}

func (UnimplementedServiceHandler) Configs(context.Context, *v1.ConfigRequest, *connect.ServerStream[v1.ConfigResult]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("streamvis.v1.Service.Configs is not implemented"))
}

func (UnimplementedServiceHandler) WriteScope(context.Context, *v1.WriteScopeRequest) (*v1.WriteScopeResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("streamvis.v1.Service.WriteScope is not implemented"))
}

func (UnimplementedServiceHandler) WriteConfig(context.Context, *v1.WriteConfigRequest) (*v1.WriteConfigResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("streamvis.v1.Service.WriteConfig is not implemented"))
}

func (UnimplementedServiceHandler) WriteNames(context.Context, *v1.WriteNameRequest) (*v1.WriteNameResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("streamvis.v1.Service.WriteNames is not implemented"))
}

func (UnimplementedServiceHandler) DeleteScopeNames(context.Context, *v1.DeleteTagRequest) (*v1.DeleteTagResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("streamvis.v1.Service.DeleteScopeNames is not implemented"))
}

func (UnimplementedServiceHandler) WriteData(context.Context, *v1.WriteDataRequest) (*v1.WriteDataResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("streamvis.v1.Service.WriteData is not implemented"))
}
