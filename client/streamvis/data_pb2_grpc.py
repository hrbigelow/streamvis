# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import data_pb2 as data__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2

GRPC_GENERATED_VERSION = '1.75.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in data_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.QueryRecords = channel.unary_stream(
                '/Service/QueryRecords',
                request_serializer=data__pb2.RecordRequest.SerializeToString,
                response_deserializer=data__pb2.StreamedRecord.FromString,
                _registered_method=True)
        self.Scopes = channel.unary_stream(
                '/Service/Scopes',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=data__pb2.StreamedRecord.FromString,
                _registered_method=True)
        self.Names = channel.unary_stream(
                '/Service/Names',
                request_serializer=data__pb2.ScopeRequest.SerializeToString,
                response_deserializer=data__pb2.StreamedRecord.FromString,
                _registered_method=True)
        self.Configs = channel.unary_stream(
                '/Service/Configs',
                request_serializer=data__pb2.ScopeRequest.SerializeToString,
                response_deserializer=data__pb2.StreamedRecord.FromString,
                _registered_method=True)
        self.WriteScope = channel.unary_unary(
                '/Service/WriteScope',
                request_serializer=data__pb2.WriteScopeRequest.SerializeToString,
                response_deserializer=data__pb2.IntegerResponse.FromString,
                _registered_method=True)
        self.WriteConfig = channel.unary_unary(
                '/Service/WriteConfig',
                request_serializer=data__pb2.WriteConfigRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.WriteNames = channel.unary_stream(
                '/Service/WriteNames',
                request_serializer=data__pb2.WriteNameRequest.SerializeToString,
                response_deserializer=data__pb2.StreamedRecord.FromString,
                _registered_method=True)
        self.DeleteScopeNames = channel.unary_unary(
                '/Service/DeleteScopeNames',
                request_serializer=data__pb2.ScopeNameRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.WriteData = channel.unary_unary(
                '/Service/WriteData',
                request_serializer=data__pb2.WriteDataRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)


class ServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def QueryRecords(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Scopes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Names(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Configs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WriteScope(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WriteConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WriteNames(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteScopeNames(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WriteData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'QueryRecords': grpc.unary_stream_rpc_method_handler(
                    servicer.QueryRecords,
                    request_deserializer=data__pb2.RecordRequest.FromString,
                    response_serializer=data__pb2.StreamedRecord.SerializeToString,
            ),
            'Scopes': grpc.unary_stream_rpc_method_handler(
                    servicer.Scopes,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=data__pb2.StreamedRecord.SerializeToString,
            ),
            'Names': grpc.unary_stream_rpc_method_handler(
                    servicer.Names,
                    request_deserializer=data__pb2.ScopeRequest.FromString,
                    response_serializer=data__pb2.StreamedRecord.SerializeToString,
            ),
            'Configs': grpc.unary_stream_rpc_method_handler(
                    servicer.Configs,
                    request_deserializer=data__pb2.ScopeRequest.FromString,
                    response_serializer=data__pb2.StreamedRecord.SerializeToString,
            ),
            'WriteScope': grpc.unary_unary_rpc_method_handler(
                    servicer.WriteScope,
                    request_deserializer=data__pb2.WriteScopeRequest.FromString,
                    response_serializer=data__pb2.IntegerResponse.SerializeToString,
            ),
            'WriteConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.WriteConfig,
                    request_deserializer=data__pb2.WriteConfigRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'WriteNames': grpc.unary_stream_rpc_method_handler(
                    servicer.WriteNames,
                    request_deserializer=data__pb2.WriteNameRequest.FromString,
                    response_serializer=data__pb2.StreamedRecord.SerializeToString,
            ),
            'DeleteScopeNames': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteScopeNames,
                    request_deserializer=data__pb2.ScopeNameRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'WriteData': grpc.unary_unary_rpc_method_handler(
                    servicer.WriteData,
                    request_deserializer=data__pb2.WriteDataRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Service', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('Service', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Service(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def QueryRecords(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/Service/QueryRecords',
            data__pb2.RecordRequest.SerializeToString,
            data__pb2.StreamedRecord.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Scopes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/Service/Scopes',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            data__pb2.StreamedRecord.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Names(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/Service/Names',
            data__pb2.ScopeRequest.SerializeToString,
            data__pb2.StreamedRecord.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Configs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/Service/Configs',
            data__pb2.ScopeRequest.SerializeToString,
            data__pb2.StreamedRecord.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def WriteScope(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Service/WriteScope',
            data__pb2.WriteScopeRequest.SerializeToString,
            data__pb2.IntegerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def WriteConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Service/WriteConfig',
            data__pb2.WriteConfigRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def WriteNames(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/Service/WriteNames',
            data__pb2.WriteNameRequest.SerializeToString,
            data__pb2.StreamedRecord.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteScopeNames(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Service/DeleteScopeNames',
            data__pb2.ScopeNameRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def WriteData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Service/WriteData',
            data__pb2.WriteDataRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
